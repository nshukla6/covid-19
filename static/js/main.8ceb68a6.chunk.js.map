{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","assets/images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","gutterBottom","color","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","localUrl","axios","get","fetchDailyData","fetchCountries","countries","map","name","Chart","useState","dailyData","setDailyData","useEffect","lineChart","labels","reportDate","datasets","total","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountry","setCountries","getCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","countryHandler","setState","this","src","coronaImage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ceb68a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames'\n\nconst Cards = ({ data :{confirmed, recovered, deaths, lastUpdate } }) => {\n  if(!confirmed){\n    return 'Loading...'\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing ={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography \n              gutterBottom\n              color=\"textSecondary\">\n                    Infected\n            </Typography>\n              <Typography variant=\"h5\">\n                  <CountUp \n                    start={0}\n                    end={confirmed.value}\n                    duration={2.5}\n                    separator=\",\"\n                  />\n              </Typography>\n              <Typography color=\"textSecondary\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography variant=\"body2\">\n                Number of active cases of covid-19\n              </Typography>\n\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography \n              gutterBottom\n              color=\"textSecondary\">\n                    Recovered\n              </Typography>\n              <Typography variant=\"h5\">\n                  <CountUp \n                    start={0}\n                    end={recovered.value}\n                    duration={2.5}\n                    separator=\",\"\n                  />\n              </Typography>\n              <Typography color=\"textSecondary\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography variant=\"body2\">\n                Number of recovered cases of covid-19\n              </Typography>\n\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography \n              gutterBottom\n              color=\"textSecondary\">\n                    Death\n              </Typography>\n              <Typography variant=\"h5\">\n                  <CountUp \n                    start={0}\n                    end={deaths.value}\n                    duration={2.5}\n                    separator=\",\"\n                  />\n              </Typography>\n              <Typography color=\"textSecondary\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography variant=\"body2\">\n                Number of deaths of covid-19\n              </Typography>\n\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards\n","import axios from 'axios';\n\nconst url = `https://covid19.mathdro.id/api`;\n\nexport const fetchData = async (country) => {\n\n  const localUrl = country ? `${url}/countries/${country}`: url;\n\n  try {\n    const { data:{confirmed, recovered, deaths, lastUpdate} } = await axios.get(localUrl);\n    \n    return {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate\n    }\n  }\n  catch(error){\n\n  }\n}\n\nexport const fetchDailyData = async () => {\n  try{\n    const { data } = await axios.get(`${url}/daily`);\n    return data;\n  }\n  catch(error){\n\n  }\n}\n\nexport const fetchCountries = async () => {\n  try{\n    const { data: {countries}} = await axios.get(`${url}/countries`);\n    return countries.map( country => country.name);\n  }\n  catch(error){\n\n  }\n}","import React,{useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data:{confirmed,recovered, deaths}, country }) => {\n  const [dailyData, setDailyData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchDailyData();\n      setDailyData(data);\n    }\n    fetchData();\n  },[]);\n  \n  const lineChart = (\n\n    dailyData[0] && <Line\n      data={{\n        labels:dailyData.map(({reportDate}) => reportDate),\n        datasets:[{\n          data: dailyData.map(({ confirmed }) => confirmed.total),\n          label:'Infected',\n          borderColor: '#3333ff',\n          fill:true\n        },{\n          data: dailyData.map(({ deaths }) => deaths.total),\n          label:'Deaths',\n          borderColor: 'red',\n          backgroundColor:'red',\n          fill:true\n        }]\n      }}\n     />\n  )\n  const barChart = (\n    dailyData[0] && <Bar\n      data={{\n        labels:['Infected','Recovered','Deaths'],\n        datasets: [{\n          label: \"People\",\n          backgroundColor: [\n            'blue','green','red'\n          ],\n          data:[confirmed.value, recovered.value, deaths.value]\n\n        }]\n      }}\n      options={{\n        legend: { display: false},\n        title:  { display: true, text: `Current state in ${country}`}\n      }}\n    >\n\n    </Bar>\n  )\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  )\n}\n\nexport default Chart\n","import React,{useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core'\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\n\n\nconst CountryPicker = ({ handleCountry }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(()=> {\n    const getCountries = async () => {\n      const countries = await fetchCountries();\n      setCountries(countries);\n    }\n    getCountries();\n  },[])\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountry(e.target.value)}>\n        <option value=\"\">Global</option>\n        {countries.map((country) => (\n            <option key={country} value={country}>{country}</option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  )\n}\nexport default CountryPicker;\n","import React, { Component } from 'react';\nimport styles from './App.module.css';\nimport { Chart, Cards, CountryPicker} from './components';\nimport { fetchData } from './api';\nimport coronaImage from '../src/assets/images/image.png'\n\nexport default class App extends Component {\n\n  state = {\n    data: {},\n    country:''\n  }\n  countryHandler = async (country) => {\n    const data = await fetchData(country);\n    this.setState({ data,country })\n  }\n\n  async componentDidMount(){\n    const data = await fetchData();\n    this.setState({ data });\n  }\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img src={coronaImage}/>\n        <Cards data = {data} />\n        <CountryPicker handleCountry={this.countryHandler} />\n        <Chart data={data} country={country} />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}